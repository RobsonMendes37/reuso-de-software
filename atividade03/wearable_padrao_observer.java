// RESPOSTA: Sistema de Alerta para Sa√∫de em Wearables üîó
// Contexto: Wearables, como smartwatches e pulseiras inteligentes, monitoram continuamente sinais vitais, como frequ√™ncia card√≠aca, oxigena√ß√£o do sangue e n√≠veis de estresse. Quando os valores monitorados ultrapassam os limites seguros, √© necess√°rio notificar servi√ßos m√©dicos, emerg√™ncias, ou o pr√≥prio usu√°rio para que a√ß√µes possam ser tomadas rapidamente.
//
// Problema: N√£o queremos acoplar os sensores dos wearables aos sistemas que consomem esses dados (usu√°rios, m√©dicos, ou servi√ßos de emerg√™ncia). Isso porque esses sistemas podem variar conforme a aplica√ß√£o. Por exemplo, um wearable pode come√ßar enviando notifica√ß√µes apenas ao usu√°rio, mas, futuramente, poder√° incluir integra√ß√µes com servi√ßos de sa√∫de ou at√© plataformas de an√°lise de dados em nuvem. Queremos uma arquitetura flex√≠vel, onde seja poss√≠vel adicionar ou remover observadores facilmente, sem modificar o c√≥digo principal.
//
// Solu√ß√£o: Utilizamos o padr√£o Observer, que permite criar uma rela√ß√£o de um-para-muitos entre o wearable (sujeito) e os sistemas que precisam reagir aos dados (observadores). Assim, quando o wearable detecta uma mudan√ßa cr√≠tica no estado dos sinais vitais, ele notifica automaticamente todos os observadores registrados.




import java.util.ArrayList;
import java.util.List;

// Interface Observer
interface Observer {
    void update(Wearable subject);
}

// Classe Sujeito (Subject)
class Wearable {
    private List<Observer> observers = new ArrayList<>();
    private int heartRate;

    // M√©todo para adicionar um observador
    public void attach(Observer observer) {
        observers.add(observer);
    }

    // M√©todo para remover um observador
    public void detach(Observer observer) {
        observers.remove(observer);
    }

    // Notifica todos os observadores
    public void notifyObservers() {
        for (Observer observer : observers) {
            observer.update(this);
        }
    }

    // Getter para frequ√™ncia card√≠aca
    public int getHeartRate() {
        return heartRate;
    }

    // Setter para frequ√™ncia card√≠aca
    public void setHeartRate(int heartRate) {
        this.heartRate = heartRate;
        notifyObservers(); // Notifica quando h√° altera√ß√£o
    }
}

// Classe Observador: Alerta para o Usu√°rio
class UserAlert implements Observer {
    @Override
    public void update(Wearable subject) {
        System.out.println("User Alert: Heart rate is " + subject.getHeartRate() + " bpm!");
    }
}

// Classe Observador: Servi√ßo M√©dico
class MedicalService implements Observer {
    @Override
    public void update(Wearable subject) {
        if (subject.getHeartRate() > 100) { // Exemplo de limiar cr√≠tico
            System.out.println("Medical Service Alert: Critical heart rate detected: " + subject.getHeartRate() + " bpm!");
        }
    }
}

// Classe Principal (Main)
public class HealthAlertSystem {
    public static void main(String[] args) {
        // Cria√ß√£o do wearable (sujeito)
        Wearable wearable = new Wearable();

        // Cria√ß√£o dos observadores
        Observer userAlert = new UserAlert();
        Observer medicalService = new MedicalService();

        // Registro dos observadores
        wearable.attach(userAlert);
        wearable.attach(medicalService);

        // Testando notifica√ß√µes
        System.out.println("Heart rate set to 90 bpm.");
        wearable.setHeartRate(90); // Notificar√° os observadores

        System.out.println("Heart rate set to 110 bpm.");
        wearable.setHeartRate(110); // Notificar√° os observadores
    }
}



// Explica√ß√£o do C√≥digo
// Interface Observer:
// Define o contrato para todos os observadores. O m√©todo update √© implementado para reagir a mudan√ßas no estado do wearable.

// Classe Sujeito (Wearable):
    // Armazena os dados monitorados (frequ√™ncia card√≠aca) e uma lista de observadores. Notifica todos os observadores sempre que o estado muda.

// Classes Observadoras:
    // UserAlert: Exibe um alerta simples ao usu√°rio sobre a mudan√ßa na frequ√™ncia card√≠aca.
    // MedicalService: Emite alertas m√©dicos apenas se a frequ√™ncia card√≠aca ultrapassar um limiar cr√≠tico.
// M√©todo main:
    // Demonstra o funcionamento, criando um wearable e registrando dois observadores. Testa notifica√ß√µes ao alterar o valor da frequ√™ncia card√≠aca.

